// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id                Int                 @id @default(autoincrement())
  email             String              @unique
  name              String
  gender            String              
  birth             DateTime
  address           String?             @default("")
  detail_address    String?             @default("")
  phone_number      String
  created_at        DateTime            @default(now())
  updated_at        DateTime            @updatedAt
  preferences       UserFavorCategory[]
  reviews           Review[]
  mission_challenges MissionChallenge[]

  @@map("user")
}

model FoodCategory {
  id          Int                 @id @default(autoincrement())
  name        String
  description String?
  created_at  DateTime            @default(now())
  updated_at  DateTime            @updatedAt
  preferences UserFavorCategory[]
  stores      Store[]

  @@map("food_category")
}

model UserFavorCategory {
  id              Int          @id @default(autoincrement())
  user            User         @relation(fields: [user_id], references: [id])
  user_id         Int
  food_category   FoodCategory @relation(fields: [food_category_id], references: [id])
  food_category_id Int
  created_at      DateTime     @default(now())

  @@map("user_favor_category")
}

model Region {
  id         Int      @id @default(autoincrement())
  name       String   @unique
  code       String   @unique
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  stores     Store[]
  
  @@map("region")
}

model Store {
  id              Int       @id @default(autoincrement())
  name            String
  address         String
  contact         String?
  category        FoodCategory @relation(fields: [category_id], references: [id])
  category_id     Int
  region          Region    @relation(fields: [region_id], references: [id])
  region_id       Int
  description     String?   @db.Text
  opening_hours   String?
  created_at      DateTime  @default(now())
  updated_at      DateTime  @updatedAt
  reviews         Review[]
  missions        Mission[]

  @@map("store")
}

model Review {
  id         Int      @id @default(autoincrement())
  content    String   @db.Text
  score      Float    @default(0.0)
  image_url  String?
  store      Store    @relation(fields: [store_id], references: [id])
  store_id   Int
  user       User     @relation(fields: [user_id], references: [id])
  user_id    Int
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@map("review")
}

model Mission {
  id               Int               @id @default(autoincrement())
  title            String
  content          String            @db.Text
  reward           Int               @default(0)
  deadline         DateTime?
  store            Store             @relation(fields: [store_id], references: [id])
  store_id         Int
  created_at       DateTime          @default(now())
  updated_at       DateTime          @updatedAt
  mission_challenges MissionChallenge[]
  
  @@map("mission")
}

model MissionChallenge {
  id         Int       @id @default(autoincrement())
  status     String    @default("ONGOING") // ONGOING, COMPLETED, FAILED
  start_at   DateTime  @default(now())
  end_at     DateTime?
  mission    Mission   @relation(fields: [mission_id], references: [id])
  mission_id Int
  user       User      @relation(fields: [user_id], references: [id])
  user_id    Int
  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt

  @@unique([mission_id, user_id]) // 한 사용자가 같은 미션을 중복해서 도전할 수 없음
  @@map("mission_challenge")
}

